#+TITLE: Tutorial 9: Frequency Domain Modeling

#+BEGIN_SRC ipython :session :exports none
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
rc('text', usetex=True)
import control
from control.matlab import *
from numpy import log10 as log
%matplotlib inline
%config InlineBackend.figure_format = 'svg'

from matplotlib2tikz import save as tikz_save
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :file Tut91.svg :exports results
num = [32000./9,32000];
den = [ 1,41,6440,6400];
sys = tf(num, den);
mag, _ , omega = control.bode_plot(sys, dB=True, Plot=False, omega=np.logspace(-1,3,100));

plt.title("Magnitude Plot of an Unknown Transfer Function")
plt.semilogx(omega, mag, 'b')

freqs = [1e-1,1e0,9,80,1e3]
slopes = [0,-20,0,-40];
mags = [20*log(5),0,0,0,0];
for i in range(1, len(freqs)):
    mags[i] = mags[i-1] + slopes[i-1]*(log(freqs[i])-log(freqs[i-1]))

for freq in [1e0, 9, 80]:
    plt.annotate('', xy=(freq,20), xytext=(freq, -50),
                arrowprops=dict(arrowstyle='-'),
                )

plt.annotate('+%.2fdB' %(-20*log(0.5)), xy=(80,1), xytext=(200, 1),
            arrowprops=dict(arrowstyle='-|>'),
            )

plt.semilogx(freqs,mags, 'r--')

yticks = np.linspace(-50, 20, 8) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.xlabel('Frequency(rad/sec)')

tikz_save(
    'tikz/Tut91.tikz',
    figureheight = '\\figureheight',
    figurewidth = '\\figurewidth'
    )

plt.show()
#+END_SRC

#+RESULTS:
[[file:Tut91.svg]]
#+BEGIN_SRC ipython :session :file Tut92.svg :exports results
num = [64, 128];
den = [ 1,3.7,65.6,32,0];
sys = tf(num, den);
mag, _ , omega = control.bode_plot(sys, dB=True, Plot=False, omega=np.logspace(-2,2,100));

plt.title("Magnitude Plot of an Unknown Transfer Function")
plt.semilogx(omega, mag, 'b')

freqs = [1e-2,0.5,2,8,1e2]
slopes = [-20,-40,-20,-60];
mags = [20*log(400),0,0,0,0];
for i in range(1, len(freqs)):
    mags[i] = mags[i-1] + slopes[i-1]*(log(freqs[i])-log(freqs[i-1]))

for freq in [0.5, 2, 8]:
    plt.annotate('', xy=(freq,40), xytext=(freq, -80),
                arrowprops=dict(arrowstyle='-'),
                )

plt.annotate('+%.2fdB' %(-20*log(0.4)), xy=(8,-10), xytext=(20, -10),
            arrowprops=dict(arrowstyle='-|>'),
            )

plt.semilogx(freqs,mags, 'r--')

yticks = np.linspace(-100, 60, 9) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.xlabel('Frequency(rad/sec)')

tikz_save(
    'tikz/Tut92.tikz',
    figureheight = '\\figureheight',
    figurewidth = '\\figurewidth'
    )

plt.show()
#+END_SRC

#+RESULTS:
[[file:Tut92.svg]]
