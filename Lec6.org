#+BEGIN_SRC ipython :session :exports none
import numpy as np
from numpy import log10 as log
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Arial']})
## for Palatino and other serif fonts use:
#rc('font',**{'family':'serif','serif':['Palatino']})
rc('text', usetex=True)
import control
from control.matlab import *
from control import bode_plot as bode
from control import nyquist, margin

%load_ext tikzmagic

%matplotlib inline
%config InlineBackend.figure_format = 'svg'
#+END_SRC

#+RESULTS:

* Relative Stability Analysis
** Motivation
- In practice it is not enough that a system is stable due to modelling uncertainties.
- There must also be some margins of stability that describe how stable the system is.
- We shall concentrate on minimum phase systems ($P=0$).
- In time-domain, the closer the dominant closed-loop poles to the imaginary axis, the poorer the system relative stability.
- Using Nyquist Stability Criterion, we know that the system is stable if and only if the Nyquist plot does not encircle $-1$.

** Example
- Let us consider the following close-loop transfer function $$G(s)H(s) = \frac{K}{(s+1)\left[(s/10)^2+s/10+1\right]}$$.
#+BEGIN_SRC ipython :session :file tmp.svg :exports none
num = [4];
den = [0.01,0.11,1.1,1];
sys = tf(num, den);
real, imag, omega = nyquist(sys, Plot=False ,omega=np.logspace(-3,2,200));

G = real + imag * 1j;
theta = np.linspace(0,2*np.pi,200);
plt.plot(np.sin(theta),np.cos(theta),'b--')
plt.plot(real,imag,'b')
plt.show()
f = open('data', 'w')
for g in G:
    f.write(str(g.real)+' '+str(g.imag)+'\n')
for g in reversed(G):
    f.write(str(g.real)+' '+str(-1*g.imag)+'\n')

f.close()

#+END_SRC

#+RESULTS:
[[file:tmp.svg]]


#+BEGIN_SRC ipython :session :file assets/Lec6Nyquist.svg :exports results
%%tikz -l arrows -s 400,400 -f svg -S assets/Lec6Nyquist.svg
\draw plot[smooth] file{data};
\draw [semithick, dotted] (1,0) arc (0:360:1);
\draw [semithick, -latex, black!70] (-2,0)--node[at end,below]{Re} (5,0);
\draw [semithick, -latex, black!70] (0,-2.5)--node[at end,left]{Im} (0,2.5);
\draw [very thin,color=gray] (-2.1,-3.1) grid (4.1,3.1);
\draw [very thin,color=gray] (-2.1,-3.1) grid (4.1,3.1);
\node [anchor=south east] at (-1,0) {-1};
\draw [red,semithick]  (-0.36,0) circle (1.5pt);
\draw [-latex] (1,1)--node[at start, above]{$-\frac{1}{K_g}$} (-0.36,0);
\draw [red, semithick, -latex] (-1,0) arc (180:256:1);
\node at (-1,-1) {$\phi_m$};
\node at (1,-3) {$K=4$};
#+END_SRC

#+RESULTS:
[[file:assets/Lec6Nyquist.svg]]
- $G(s)H(s)$ is minimum phase
- To make the system closed-loop stable, the Nyquist plot should not encircle $-1$.
- From the figure, the larger the value of $K$ the closer the Nyquist plot is to the critical point $–1$.
- The closeness of the plot to $–1$ gives a measure on the relative stability of the system.
- In general, it is expected that the closer the Nyquist plot is to the critical point, the larger the maximum overshoot and the longer the settling time will be (worse performance).

** Gain Margin 
- The gain margin $K_g$ of a system is defined as the largest amount that the open loop gain can be increased before the closed loop system goes unstable.
- Define $\omega_{\phi}$ to be the smallest frequency, where the phase of the open-loop transfer function is $-180^\circ$.
- $\omega_{\phi}$ is called the phase crossover frequency.
- If the open loop minimum-phase transfer function satisfies the following conditions:
  - The phase starts at 0 or -90.
  - The phase is monotonically decreasing
  - The magnitude is monotonically decreasing
- Then the gain margin for the system is given by $$K_g = \frac{1}{|G(j\omega_\phi)H(\omega_\phi)|}.$$
- In terms of decibles,$$K_g(dB) = -20\log|G(j\omega_\phi)H(\omega_\phi)|.$$

** Phase Margin
- The phase margin $\phi_m$ is the amount of phase lag required to reach the stability limit.
- Define $\omega_{g}$ to be the smallest frequency, where the magnitude of the open-loop transfer function is $1$ or $0dB$.
- $\omega_{g}$ is called the gain crossover frequency.
- If the open loop minimum-phase transfer function satisfies the following conditions:
  - The phase starts at 0 or -90.
  - The phase is monotonically decreasing
  - The magnitude is monotonically decreasing
- Then the phase margin for the system is given by $$\phi_m = 180^\circ+\angle G(j\omega_g)H(\omega_g).$$

** Gain and Phase Margin on Bode Plot 
- Suppose the open loop minimum-phase transfer function satisfies the following conditions:
  - The phase starts at 0 or -90.
  - The phase is monotonically decreasing
  - The magnitude is monotonically decreasing
- We can find the gain and phase crossover frequency and get the stability margins from Bode plot.
- For most of the systems, we can find the stability margins from the Bode plot.
- However, the Bode plot interpretation of the gain and phase margins can be incorrect. (Need to look at Nyquist Plot)
#+BEGIN_SRC ipython :session :file assets/Lec6Bode.svg :exports results
num = [4];
den = [0.01,0.11,1.1,1];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1,2,200));
Kg, pm, Wg, Wp = margin(sys)

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Bode Plot of $4/(s+1)(0.01s^2+0.1s+1)$")
plt.semilogx(omega, mag, 'b')
plt.semilogx([Wp,Wp], [-20*log(Kg), 0],'r')
plt.annotate('({:.1f}, {:.1f}dB)'.format(Wp, -20*log(Kg)), 
            xy=(Wp,-20*log(Kg)), xytext=(2*Wp,-20*log(Kg)),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
yticks = np.linspace(-80, 20, 6) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.subplot(212)
plt.semilogx(omega, phase,'b')
plt.semilogx([Wg,Wg], [pm-180, -180],'r')
plt.annotate('({:.1f}, {:.1f}$^\circ$)'.format(Wg, pm-180), 
            xy=(Wg,pm-180), xytext=(2*Wg,pm-180),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')
yticks = np.linspace(0, -270, 4) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec6Bode.svg]]

** Unstable System
#+BEGIN_SRC ipython :session :file assets/Lec6BodeUnstable.svg :exports results
num = [20];
den = [0.01,0.11,1.1,1];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1,2,200));
Kg, pm, Wg, Wp = margin(sys)

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Bode Plot of $20/(s+1)(0.01s^2+0.1s+1)$")
plt.semilogx(omega, mag, 'b')
plt.semilogx([Wp,Wp], [-20*log(Kg), 0],'r')

plt.annotate('({:.1f}, {:.1f}dB)'.format(Wp, -20*log(Kg)), 
            xy=(Wp,-20*log(Kg)), xytext=(2*Wp,-20*log(Kg)),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
yticks = np.linspace(-80, 20, 6) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.subplot(212)
plt.semilogx(omega, phase,'b')
plt.semilogx([Wg,Wg], [pm-540, -180],'r')

plt.annotate('({:.1f}, {:.1f}$^\circ$)'.format(Wg, pm-540), 
            xy=(Wg,pm-540), xytext=(2*Wg,pm-540),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')
yticks = np.linspace(0, -270, 4) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec6BodeUnstable.svg]]
#+BEGIN_SRC ipython :session :file tmp.svg :exports none
num = [20];
den = [0.01,0.11,1.1,1];
sys = tf(num, den);
real, imag, omega = nyquist(sys, Plot=False ,omega=np.logspace(-3,2,200));

G = real + imag * 1j;
theta = np.linspace(0,2*np.pi,200);
plt.plot(np.sin(theta),np.cos(theta),'b--')
plt.plot(real,imag,'b')
plt.show()
f = open('data', 'w')
for g in G:
    f.write(str(g.real)+' '+str(g.imag)+'\n')
for g in reversed(G):
    f.write(str(g.real)+' '+str(-1*g.imag)+'\n')

f.close()

#+END_SRC

#+RESULTS:
[[file:tmp.svg]]


#+BEGIN_SRC ipython :session :file assets/Lec6NyquistUnstable.svg :exports results
%%tikz -l arrows -s 400,400 -f svg -S assets/Lec6NyquistUnstable.svg
\clip (-3.1,-3.1) rectangle (4.1,3.1);
\draw plot[smooth] file{data};
\draw [semithick, dotted] (1,0) arc (0:360:1);
\draw [semithick, -latex, black!70] (-2,0)--node[at end,below]{Re} (5,0);
\draw [semithick, -latex, black!70] (0,-2.5)--node[at end,left]{Im} (0,2.5);
\draw [very thin,color=gray] (-3.1,-3.1) grid (4.1,3.1);
\node [anchor=north] at (-1,0) {-1};
\draw [red,semithick]  (-1.8,0) circle (1.5pt);
\draw [-latex] (-1.8,1)--node[at start, above]{$-\frac{1}{K_g}$} (-1.8,0);
\draw [red, semithick, -latex] (-1,0) arc (180:155:1);
\node [anchor = north west] at (-1,1) {$\phi_m$};
\node [anchor = south] at (1,-3) {$K=20$};
#+END_SRC

#+RESULTS:
[[file:assets/Lec6Nyquist.svg]]

** Stability Margins and Closed-Loop Stability
- Unstable closed-loop system has negative gain and phase margin
- Stable closed-loop system has positive gain and phase margin
- Proper phase and gain margins ensure stability against modeling uncertainties and variations in system components.

** Stability Margins and System Performance
- For minimum phase systems, to have satisfactory performance, the phase margin should be between $30^\circ$ and $70^\circ$ and gain margin should be greater than $6dB$.
- For second-order system, the phase margin is directly related to the damping ratio of the closed loop system.
 #+BEGIN_SRC ipython :session :file assets/Lec6Secondorder.svg :exports results
%%tikz -l matrix,arrows,shapes -s 800,200 -f svg -S assets/Lec6Secondorder.svg
\tikzstyle{point} = [coordinate]
\tikzstyle{box} = [rectangle, draw, semithick]
\matrix[row sep = 7mm, column sep = 10mm]{
%first row
\node (p1) [] {$R(s)$};&
\node (p2) [circle,draw,inner sep=4pt] {};&
\node (outer) [box] {$\frac{\omega_n^2}{s(s+2\zeta\omega_n)}$};&
\node (p5) [point] {};&
\node (p6) [] {$Y(s)$};\\
%third row
&
\node (p9) [point] {};&
&
\node (p10) [point] {};&
\\
};
\draw [semithick,->] (p1)--node[near end, above]{\scriptsize{$+$}} (p2);
\draw [semithick,->] (p2)--(outer);
\draw [semithick,->] (outer)--(p6);
\draw [semithick,->] (p5)--(p10)--(p9)--node[near end, left]{\scriptsize{$-$}} (p2);
\draw [semithick] (p2.north east)--(p2.south west);
\draw [semithick] (p2.south east)--(p2.north west);
#+END_SRC

- The closed-loop transfer function is given by $$\frac{Y(s)}{R(s)} = \frac{1}{(s/\omega_n)^2+2\zeta s/\omega_n +1}.$$
- The phase margin is related to the damping ratio by $$\phi_m=\tan^{-1}\frac{2\zeta}{\sqrt{\sqrt{1+4\zeta^4}-2\zeta^2}}.$$
- The large the phase margin, the larger the damping ratio. In particular, for $0\leq \zeta\leq 0.6$, $\zeta \approx \phi_m/100$.
- For more complicated higher order systems, good stability margins may not be enough to guarantee good performance.

** Example: System with Good Stability Margins but Poor Performance
- Consider the following open-loop transfer function $$G(s)H(s) = \frac{0.38(s^2+0.1s+0.55)}{s(s+1)(s^2+0.06s+0.5)}.$$
- The system has infinite gain margin and $70^\circ$ phase margin.
- However, the closed-loop system has two poles at $-0.01\pm 0.7j$.
#+BEGIN_SRC ipython :session :file tmp.svg :exports none
num = [0.38,0.038,0.209];
den = [1.0, 1.06, 0.56, 0.5, 0.0];
sys = tf(num, den);
real, imag, omega = nyquist(sys, Plot=False ,omega=np.logspace(-1,2,1000));

G = real + imag * 1j;
theta = np.linspace(0,2*np.pi,200);
plt.plot(np.sin(theta),np.cos(theta),'b--')
plt.plot(real,imag,'b')
plt.show()
f = open('data', 'w')
for g in G:
    f.write(str(g.real)+' '+str(g.imag)+'\n')
for g in reversed(G):
    f.write(str(g.real)+' '+str(-1*g.imag)+'\n')

f.close()

#+END_SRC

#+RESULTS:
[[file:tmp.svg]]


#+BEGIN_SRC ipython :session :file assets/Lec6NyquistPoor.svg :exports results
%%tikz -l arrows -s 400,400 -f svg -S assets/Lec6NyquistPoor.svg
\clip (-3.1,-3.1) rectangle (3.1,3.1);
\draw plot[smooth] file{data};
\draw [semithick, dotted] (1,0) arc (0:360:1);
\draw [semithick, -latex, black!70] (-2,0)--node[at end,below]{Re} (5,0);
\draw [semithick, -latex, black!70] (0,-2.5)--node[at end,left]{Im} (0,2.5);
\draw [very thin,color=gray] (-3.1,-3.1) grid (4.1,3.1);
\node [anchor=south east] at (-1,0) {-1};
\draw [red, semithick, -latex] (-1,0) arc (180:249.7:1);
\node [anchor = north west] at (-1,-1) {$\phi_m$};
\node [anchor = south] at (1,-3) {$\frac{0.38(s^2+0.1s+0.55)}{s(s+1)(s^2+0.06s+0.5)}$};
#+END_SRC

#+RESULTS:
[[file:assets/Lec6NyquistPoor.svg]]

#+BEGIN_SRC ipython :session :file assets/Lec6BodePoor.svg :exports results
num = [0.38,0.038,0.209];
den = [1.0, 1.06, 0.56, 0.5, 0.0];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1,2,200));
Kg, pm, Wg, Wp = margin(sys)

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Bode Plot of ${0.38(s^2+0.1s+0.55)}/{s(s+1)(s^2+0.06s+0.5)}$")
plt.semilogx(omega, mag, 'b')
yticks = np.linspace(-80, 20, 6) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.subplot(212)
plt.semilogx(omega, phase,'b')
plt.semilogx([Wg,Wg], [pm-180, -180],'r')

plt.annotate('({:.1f}, {:.1f}$^\circ$)'.format(Wg, pm-180), 
            xy=(Wg,pm-180), xytext=(2*Wg,pm-180),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')
yticks = np.linspace(-90, -180, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec6BodePoor.svg]]

** Example
Consider an open-loop transfer function
$$G(s)H(s) = \frac{K}{s(s+1)(s+5)}.$$
Derive the stability margins of the system for $K = 10$ and $K = 100$.
*** $K=10$
For $K=10$, $\phi_m = 25^\circ$ and $K_g=9.5 dB$. The system is stable.
#+BEGIN_SRC ipython :session :file assets/Lec6BodeK10.svg :exports results
num = [10];
den = [1,6,5,0];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1,2,200));
Kg, pm, Wg, Wp = margin(sys)

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Bode Plot of $10/s(s+1)(s+5)$")
plt.semilogx(omega, mag, 'b')
plt.semilogx([Wp,Wp], [-20*log(Kg), 0],'r')

plt.annotate('({:.1f}, {:.1f}dB)'.format(Wp, -20*log(Kg)), 
            xy=(Wp,-20*log(Kg)), xytext=(2*Wp,-20*log(Kg)),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
yticks = np.linspace(-80, 20, 6) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.subplot(212)
plt.semilogx(omega, phase,'b')
plt.semilogx([Wg,Wg], [pm-180, -180],'r')

plt.annotate('({:.1f}, {:.1f}$^\circ$)'.format(Wg, pm-180), 
            xy=(Wg,pm-180), xytext=(2*Wg,pm-180),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')
yticks = np.linspace(-90, -270, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec6BodeK10.svg]]


*** $K=100$
For $K=100$, $\phi_m = -23^\circ$ and $K_g=-10.5 dB$. The system is unstable.
#+BEGIN_SRC ipython :session :file assets/Lec6BodeK100.svg :exports results
num = [100];
den = [1,6,5,0];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1,2,200));
Kg, pm, Wg, Wp = margin(sys)

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Bode Plot of $100/s(s+1)(s+5)$")
plt.semilogx(omega, mag, 'b')
plt.semilogx([Wp,Wp], [-20*log(Kg), 0],'r')

plt.annotate('({:.1f}, {:.1f}dB)'.format(Wp, -20*log(Kg)), 
            xy=(Wp,-20*log(Kg)), xytext=(2*Wp,-20*log(Kg)),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
yticks = np.linspace(-80, 40, 7) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.subplot(212)
plt.semilogx(omega, phase,'b')
plt.semilogx([Wg,Wg], [pm-540, -180],'r')

plt.annotate('({:.1f}, {:.1f}$^\circ$)'.format(Wg, pm-540), 
            xy=(Wg,pm-540), xytext=(2*Wg,pm-540),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')
yticks = np.linspace(-90, -270, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec6BodeK100.svg]]
