#+BEGIN_SRC ipython :session :exports none
import numpy as np
from numpy import log10 as log
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Arial']})
## for Palatino and other serif fonts use:
#rc('font',**{'family':'serif','serif':['Palatino']})
rc('text', usetex=True)
import control
from control.matlab import *
from control import bode_plot as bode
from control import nyquist, margin

%load_ext tikzmagic

%matplotlib inline
%config InlineBackend.figure_format = 'svg'
#+END_SRC

#+RESULTS:

* Loop Shaping
** Introduction
#+BEGIN_SRC ipython :session :file assets/Lec7Diagram.svg :exports results
%%tikz -l matrix,arrows,shapes -s 400,200 -f svg -S assets/Lec7Diagrama.svg
\tikzstyle{point} = [coordinate]
\tikzstyle{box} = [rectangle, draw, semithick]
\matrix[row sep = 7mm, column sep = 10mm]{
%first row
\node (p1) [] {$R(s)$};&
\node (p2) [circle,draw,inner sep=4pt] {};&
\node (outer) [box] {$C(s)$};&
\node (p3) [point] {};&
\node (inner) [box] {$G(s)$};&
\node (p5) [point] {};&
\node (p6) [] {$Y(s)$};\\
%third row
&
\node (p9) [point] {};&
&
&
&
\node (p10) [point] {};&
\\
};
\draw [semithick,->] (p1)--node[near end, above]{\scriptsize{$+$}} (p2);
\draw [semithick,->] (p2)--(outer);
\draw [semithick,->] (outer)--(p3)--(inner);
\draw [semithick,->] (inner)--(p5)--(p6);
\draw [semithick,->] (p5)--(p10)--(p9)--node[near end, left]{\scriptsize{$-$}} (p2);
\draw [semithick] (p2.north east)--(p2.south west);
\draw [semithick] (p2.south east)--(p2.north west);
#+END_SRC

#+RESULTS:
[[file:assets/Lec7Diagram.svg]]
- Nyquist Stability Criterion tells us the stability of the closed-loop system depends on the open-loop transfer function $C(s)G(s)$.
- Loop shaping means to choose a compensator(controller) $C(s)$ to give the open-loop transfer function $C(s)G(s)$ a desired shape.
- Commonly used controller includes PID controller, lag/lead compensator, and combined lag-lead compensator.

** Desirable Shape: Low Frequency
- In the low frequency, the gain should be high to have good steady state accuracy.
  * For type-0 system, the position error constant is $G(0)$.
  * For type-1 system, the position error constant is $0$ and the velocity error constant is $\lim_{s\rightarrow 0} sG(s)$.
  * For type-2 system, the position and velocity error constant is $0$ and the acceleration error constant is $\lim_{s\rightarrow 0} s^2G(s)$.

** Desirable Shape: Mid Frequency
- *Bode's Relation* For a minimum phase system, if the magnitude plot is a straight line with slope $20N$, then the phase will be $90N^\circ$.
- Around the gain crossover frequency, the slope of the magnitude plot should be about $-20$ and extend over a sufficient range of frequency
- The phase will then be $\approx -90^\circ$ with a stability margin $\approx 90^\circ$

** Desirable Shape: High Frequency
- In the high frequency, the gain must be small in order to have good noise attenuation and robustness against model uncertainty.
- The choice of gain crossover frequency is a compromise among steady-state error, rejection of noise and robustness.

** Desirable Shape: Implications in the Time Domain
| Freq. Domain                       | Time Domain                                     |
|------------------------------------+-------------------------------------------------|
| Phase margin$\uparrow$             | damping ratio$\uparrow$ overshot$\downarrow$   |
| Gain crossover frequency$\uparrow$ | rise time$\downarrow$ settling time$\downarrow$ |
| Low frequency gain$\uparrow$       | steady state error$\uparrow$                    |

** Desirable Shape: Example
Consider the following open-loop transfer function
$$G(s) = \frac{10(s+1)}{s^2\left[(s/100)^2+2(s/100)+1\right]}.$$
#+BEGIN_SRC ipython :session :file assets/Lec7IdealShape.svg :exports results
num = [10,10];
den = [1e-4,2e-2,1,0,0];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1,3,100));
Kg, pm, Wg, Wp = margin(sys)

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Ideal Maginitude Plot Shape")
plt.semilogx(omega, mag, 'b')
yticks = np.linspace(-80, 60, 8) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.semilogx([1e-1,1e0,1e2,1e3],[60,20,-20,-80], 'r--')
plt.semilogx([Wp,Wp], [-20*log(Kg), 0],'r')
plt.annotate('$K_g$=%.1fdB' % (-20*log(Kg)), xy=(Wp,-20*log(Kg)), xytext=(Wp/2,-20*log(Kg)-20),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='right',
            verticalalignment='center', 
            )
plt.grid(b=True, which='both')
plt.subplot(212)
g2, = plt.semilogx(omega, phase,'b')
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')

plt.semilogx([Wg,Wg], [pm-180, -180],'r')
plt.annotate('$\phi_m$=%0.1f' % pm, xy=(Wg,pm-180), xytext=(2*Wg,pm-180),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
yticks = np.linspace(-270, -90, 5) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7IdealShape.svg]]


** Desirable Shape: Example
The closed-loop transfer function is
$$\frac{G(s)}{1+G(s)} = \frac{10(s+1)}{10^{-4}s^4+2\times 10^{-2}s^3+s^2+10s+10}.$$
#+BEGIN_SRC ipython :session :file assets/Lec7IdealStepResponse.svg :exports results
num = [10,10];
den = [1e-4,2e-2,1,10,10];
sys = tf(num, den);
T, yout = control.step_response(sys);

plt.title("Step Response")
plt.plot(T, yout, 'b')
plt.grid(b=True, which='both')
plt.ylim(0,1.2)
plt.xlim(0,6)
plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7IdealStepResponse.svg]]

* Lead Compensator
- The transfer function of a lead compensator is $$C(s) = K\frac{Ts+1}{\alpha Ts+1},\,0<\alpha<1.$
#+BEGIN_SRC ipython :session :file assets/Lec7Lead.svg :exports results
num = [10,10];
den = [0.1,1];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1.5,2.5,100));

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Lead Compensator: $10(s+1)/(0.1s+1)$")
plt.semilogx(omega, mag, 'b')
yticks = np.linspace(20, 40, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')
plt.subplot(212)
g2, = plt.semilogx(omega, phase,'b')
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')

yticks = np.linspace(0, 90, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7Lead.svg]]
** Observations
- The low frequency gain is increased by $20\log K$. (smaller steady state error)
- The phase is always positive, which is why it is called a lead compensator
  * The phase margin will be increased
  * Smaller overshot
- The system's gain crossover frequency will also be increased, resulting in faster response (but the system will be more susceptible to noise)

** 
