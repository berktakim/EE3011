#+BEGIN_SRC ipython :session :exports none
import numpy as np
from numpy import log10 as log
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Arial']})
## for Palatino and other serif fonts use:
#rc('font',**{'family':'serif','serif':['Palatino']})
rc('text', usetex=True)
import control
from control.matlab import *
from control import bode_plot as bode
from control import nyquist, margin

%load_ext tikzmagic

%matplotlib inline
%config InlineBackend.figure_format = 'svg'
#+END_SRC

#+RESULTS:

* Loop Shaping
** Introduction
#+BEGIN_SRC ipython :session :file assets/Lec7Diagram.svg :exports results
%%tikz -l matrix,arrows,shapes -s 400,200 -f svg -S assets/Lec7Diagrama.svg
\tikzstyle{point} = [coordinate]
\tikzstyle{box} = [rectangle, draw, semithick]
\matrix[row sep = 7mm, column sep = 10mm]{
%first row
\node (p1) [] {$R(s)$};&
\node (p2) [circle,draw,inner sep=4pt] {};&
\node (outer) [box] {$C(s)$};&
\node (p3) [point] {};&
\node (inner) [box] {$G(s)$};&
\node (p5) [point] {};&
\node (p6) [] {$Y(s)$};\\
%third row
&
\node (p9) [point] {};&
&
&
&
\node (p10) [point] {};&
\\
};
\draw [semithick,->] (p1)--node[near end, above]{\scriptsize{$+$}} (p2);
\draw [semithick,->] (p2)--(outer);
\draw [semithick,->] (outer)--(p3)--(inner);
\draw [semithick,->] (inner)--(p5)--(p6);
\draw [semithick,->] (p5)--(p10)--(p9)--node[near end, left]{\scriptsize{$-$}} (p2);
\draw [semithick] (p2.north east)--(p2.south west);
\draw [semithick] (p2.south east)--(p2.north west);
#+END_SRC

#+RESULTS:
[[file:assets/Lec7Diagram.svg]]
- Nyquist Stability Criterion tells us the stability of the closed-loop system depends on the open-loop transfer function $C(s)G(s)$.
- Loop shaping means to choose a compensator(controller) $C(s)$ to give the open-loop transfer function $C(s)G(s)$ a desired shape.
- Commonly used controller includes PID controller, lag/lead compensator, and combined lag-lead compensator.

** Desirable Shape: Low Frequency
- In the low frequency, the gain should be high to have good steady state accuracy.
  * For type-0 system, the position error constant is $G(0)$.
  * For type-1 system, the position error constant is $0$ and the velocity error constant is $\lim_{s\rightarrow 0} sG(s)$.
  * For type-2 system, the position and velocity error constant is $0$ and the acceleration error constant is $\lim_{s\rightarrow 0} s^2G(s)$.

** Desirable Shape: Mid Frequency
- *Bode's Relation* For a minimum phase system, if the magnitude plot is a straight line with slope $20N$, then the phase will be $90N^\circ$.
- Around the gain crossover frequency, the slope of the magnitude plot should be about $-20$ and extend over a sufficient range of frequency
- The phase will then be $\approx -90^\circ$ with a stability margin $\approx 90^\circ$

** Desirable Shape: High Frequency
- In the high frequency, the gain must be small in order to have good noise attenuation and robustness against model uncertainty.
- The choice of gain crossover frequency is a compromise among steady-state error, rejection of noise and robustness.

** Desirable Shape: Implications in the Time Domain
| Freq. Domain                       | Time Domain                                     |
|------------------------------------+-------------------------------------------------|
| Phase margin$\uparrow$             | damping ratio$\uparrow$ overshot$\downarrow$   |
| Gain crossover frequency$\uparrow$ | rise time$\downarrow$ settling time$\downarrow$ |
| Low frequency gain$\uparrow$       | steady state error$\uparrow$                    |

** Desirable Shape: Example
Consider the following open-loop transfer function
$$G(s) = \frac{10(s+1)}{s^2\left[(s/100)^2+2(s/100)+1\right]}.$$
#+BEGIN_SRC ipython :session :file assets/Lec7IdealShape.svg :exports results
num = [10,10];
den = [1e-4,2e-2,1,0,0];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1,3,100));
Kg, pm, Wg, Wp = margin(sys)

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Ideal Maginitude Plot Shape")
plt.semilogx(omega, mag, 'b')
yticks = np.linspace(-80, 60, 8) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.semilogx([1e-1,1e0,1e2,1e3],[60,20,-20,-80], 'r--')
plt.semilogx([Wp,Wp], [-20*log(Kg), 0],'r')
plt.annotate('$K_g$=%.1fdB' % (-20*log(Kg)), xy=(Wp,-20*log(Kg)), xytext=(Wp/2,-20*log(Kg)-20),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='right',
            verticalalignment='center', 
            )
plt.grid(b=True, which='both')
plt.subplot(212)
g2, = plt.semilogx(omega, phase,'b')
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')

plt.semilogx([Wg,Wg], [pm-180, -180],'r')
plt.annotate('$\phi_m$=%0.1f' % pm, xy=(Wg,pm-180), xytext=(2*Wg,pm-180),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
yticks = np.linspace(-270, -90, 5) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7IdealShape.svg]]


** Desirable Shape: Example
The closed-loop transfer function is
$$\frac{G(s)}{1+G(s)} = \frac{10(s+1)}{10^{-4}s^4+2\times 10^{-2}s^3+s^2+10s+10}.$$
#+BEGIN_SRC ipython :session :file assets/Lec7IdealStepResponse.svg :exports results
num = [10,10];
den = [1e-4,2e-2,1,10,10];
sys = tf(num, den);
T, yout = control.step_response(sys);

plt.title("Step Response")
plt.plot(T, yout, 'b')
plt.grid(b=True, which='both')
plt.ylim(0,1.2)
plt.xlim(0,6)
plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7IdealStepResponse.svg]]

* Lead Compensator
- The transfer function of a lead compensator is $$C(s) = K\frac{Ts+1}{\alpha Ts+1},\,0<\alpha<1.$$
#+BEGIN_SRC ipython :session :file assets/Lec7Lead.svg :exports results
num = [10,10];
den = [0.1,1];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1.5,2.5,100));

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Lead Compensator: $10(s+1)/(0.1s+1)$")
plt.semilogx(omega, mag, 'b')
yticks = np.linspace(20, 40, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')
plt.subplot(212)
g2, = plt.semilogx(omega, phase,'b')
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')

yticks = np.linspace(0, 90, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7Lead.svg]]
** Observations
- The low frequency gain is changed by $20\log K$.
  * $K$ can be chosen to satisfy specification on steady-state error.
- The phase is always positive, which is why it is called a lead compensator
  * The phase margin will be increased
  * Smaller overshot
- The system's gain crossover frequency will also be increased, resulting in faster response (but the system will be more susceptible to noise)

** Analysis
- The phase response of the lead compensator is given by $$\angle C(j\omega) = \tan^{-1}(\omega T) - \tan^{-1}(\alpha\omega T).$$
- The maximum phase lead occurs when $$ \frac{d\angle C(j\omega)}{d\omega} = \frac{T}{1+\omega^2T^2}-\frac{\alpha T}{1+\alpha^2\omega^2T^2} = 0,$$which implies that $\omega = 1/\sqrt{\alpha}T$.
- The maximum lead is $$\tan^{-1}\left(1/\sqrt{\alpha} \right)- \tan^{-1}\sqrt{\alpha} = \sin^{-1}\frac{1-\alpha}{1+\alpha}.$$
- Therefore, to achieve $\phi$ maximum phase lead, we need to choose $$\alpha = \frac{1-\sin \phi}{1+\sin\phi}.$$
- The corresponding magnitude increase is $$K\left|\frac{jT\omega+1}{j\alpha T\omega + 1}\right| = K\frac{\sqrt{1+1/\alpha}}{\sqrt{1+\alpha}} = K\alpha^{-1/2} = 20\log K-10\log \alpha (\text{dB}).$$
#+BEGIN_SRC ipython :session :file assets/Lec7LeadAnalysis.svg :exports results
T = 1;
alpha = 0.1
K = 10;
Wm = 1/np.sqrt(alpha)/T;
num = [K*T,K];
den = [alpha*T,1];
sys = tf(num, den);
mag, phase, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-1.5,2.5,100));

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Lead Compensator: $10(s+1)/(0.1s+1)$")
plt.semilogx(omega, mag, 'b')
plt.semilogx([Wm, Wm], [20*log(K), 20*log(K)-10*log(alpha)], 'r')
plt.annotate('$20\log K - 10\log a$', xy=(Wm,20*log(K)), 
            xytext=(2*Wm,20*log(K)-5*log(alpha)),
            horizontalalignment='left',
            verticalalignment='center', 
            )
yticks = np.linspace(20, 40, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.subplot(212)
plt.semilogx(omega, phase,'b')
plt.semilogx([Wm, Wm], [0, np.arcsin((1-alpha)/(1+alpha))*180/np.pi], 'r')
plt.annotate('$\sin^{-1}[(1-a)/(1+a)]$', xy=(Wm,0), 
            xytext=(Wm,np.arcsin((1-alpha)/(1+alpha))*180/np.pi),
            horizontalalignment='center',
            verticalalignment='bottom', 
            )
yticks = np.linspace(20, 40, 3) 
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')

yticks = np.linspace(0, 90, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7LeadAnalysis.svg]]

** Design Procedure
- Determine the gain $K$ to satisfy the steady state error requirement. For example, for type-0 system: $$e_{ss} = \frac{1}{1+K_p},\text{ and }K_p = \lim_{s\rightarrow 0} C(s)G(s) = KG(0).$$
- Draw the Bode plots of $KG(s)$, derive the phase margin $\phi_0$.
- From $\phi_0$ and the required phase margin $PM$, determine the phase lead $\phi$: $$\phi = PM - \phi_0 + 5^\circ\sim 10^\circ.$$
- Derive $$\alpha = \frac{1-\sin \phi}{1+\sin \phi}.$$
- To achieve the maximum phase lead, place the gain crossover frequency $\omega_g$ at $1/\sqrt{\alpha}T$. Therefore, $$20\log|G(j\omega_g)| + 20\log K = 10\log \alpha,$$ and we can derive $\omega_g$.
- Choose $$T = \frac{1}{\sqrt{\alpha}\omega_g}.$$
- Verify the result using Matlab.

** Example
In a solar tracking system, the control objective is to drive the solar panel which is attached to motor shaft in order to track the light source. The transfer function of the system is given by 
$$G(s) = \frac{10}{s(s+1)}.$$
Design a lead compensator such that
$$K_v \geq 100,\,\phi_m \geq 40^\circ,\, K_g \geq 10\text{dB}.$$

*** Determine $K$
- The lead compensator is of the form $$C(s) = K\frac{Ts+1}{\alpha Ts+1}.$$
- The velocity error constant is defined as $$K_v = \lim_{s\rightarrow 0}sC(s)G(s) = 10K = 100.$$
- Hence, we should choose $K = 10$.

*** Sketch the Bode Plots of $KG(s)$
We will use the straight line approximation:
#+BEGIN_SRC ipython :session :file assets/Lec7ExampleBodeSketch.svg :exports results

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)

yticks = np.linspace(-80, 80, 5) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.title("Straight Line Approximation of $100/s(s+1)$")
plt.semilogx([1e-2,1e0,1e3], [80,40,-80], 'r--')
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.subplot(212)
plt.semilogx([1e-2,1e-1,1e1,1e3], [-90,-90,-180,-180], 'r--')
yticks = np.linspace(-90, -180, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7ExampleBodeSketch.svg]]

*** Determine $\alpha$
- From the straight line approximation, the phase margin is $\approx 0^\circ$.
- In order to achieve $40^\circ$ phase margin, we will choose the maximum phase lead of the compensator to be $$\phi = 40^\circ - 0^\circ + 5^\circ = 45^\circ.$$
- The corresponding $$\alpha = \frac{1-\sin 45^\circ}{1+\sin 45^\circ} = 0.1716.$$

*** Determine $T$
- Using the straight line approximation, we know that $$20\log|KG(j\omega)|\approx = 40-40\log(\omega).$$
- The gain crossover frequency $\omega_g$ of $C(s)G(s)$ satisfies $$40-40\log(\omega_g) -10\log(\alpha) = 0.$$
- Therefore, $\omega_g \approx 15.54$ and $$T = \frac{1}{\sqrt{\alpha}\omega_g} = 0.1554.$$
- The compensator is obtained as $$C(s) = 10\frac{0.1554s+1}{0.0267s+1}.$$

*** Verification
- The phase margin is $48.7^\circ$ and the gain margin is $\infty$.
#+BEGIN_SRC ipython :session :file assets/Lec7ExampleBode.svg :exports results
K = 10;
num = [10];
den = [1,1,0];
sys = tf(num, den);

mag1, phase1, omega = bode(sys, dB=True, Plot=False, omega=np.logspace(-2,3,200));

phi = 45/180*np.pi;
alpha = -1 + 2/(1+np.sin(phi));

wg = 10*np.power(alpha,-0.25);
T = 1/np.sqrt(alpha)/wg;
num = [K*T,K];
den = [alpha*T,1];
ctrl = tf(num,den);

mag2, phase2, omega = bode(control.series(ctrl,sys), dB=True, Plot=False, omega=np.logspace(-2,3,200));

Kg, pm, Wg, Wp = margin(control.series(ctrl,sys))

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Bode Plot of $C(s)G(s)$")
plt.semilogx(omega, mag1, 'b--')
plt.semilogx(omega, mag2, 'r')
yticks = np.linspace(-80, 80, 5) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Magnitude(dB)')
plt.grid(b=True, which='both')

plt.subplot(212)
plt.semilogx(omega, phase1, 'b--')
plt.semilogx(omega, phase2, 'r')
plt.semilogx([Wg,Wg], [pm-180, -180],'r')
plt.annotate('$\phi_m$=%.1f' % pm, xy=(Wg,pm-180), xytext=(2*Wg,pm-180),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='left',
            verticalalignment='center', 
            )
yticks = np.linspace(-90, -180, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('Phase(deg)')
plt.xlabel('Frequency(rad/sec)')
plt.grid(b=True, which='both')

plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7ExampleBode.svg]]

*** Step Response
- After the compensation, the system responses faster and has less overshoot.
#+BEGIN_SRC ipython :session :file assets/Lec7ExampleStep.svg :exports results
num = [10];
den = [1,1,0];
sys = tf(num, den);

K = 10;
phi = 45/180*np.pi;
alpha = -1 + 2/(1+np.sin(phi));
wg = 10*np.power(alpha,-0.25);
T = 1/np.sqrt(alpha)/wg;
num = [K*T,K];
den = [alpha*T,1];
ctrl = tf(num,den);

cl = control.feedback(control.series(ctrl,sys))
T, yout = control.step_response(cl, T=np.linspace(0,6,200));

plt.title("Step Response")
plt.plot(T, yout, 'r')

cl = control.feedback(sys)
T, yout = control.step_response(cl, T=np.linspace(0,6,200));

plt.plot(T, yout, 'b--')
plt.grid(b=True, which='both')
plt.ylim(0,1.6)
plt.xlim(0,6)
plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec7ExampleStep.svg]]

** Remarks
- The lead compensator improves the phase margin and thus the transient performance (overshoot) of the system.
- The gain crossover frequency is increased. Thus, the speed of the system response is improved.
- However, the lead compensator increases the high frequency gain of the system. This makes the system more susceptible to noise signals.
