#+TITLE: Tutorial 12: Controller Design

#+BEGIN_SRC ipython :session :exports none
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
rc('text', usetex=True)
import control
from control.matlab import *
from numpy import log10 as log
%matplotlib inline
%config InlineBackend.figure_format = 'svg'

from matplotlib2tikz import save as tikz_save
#+END_SRC

#+RESULTS:



#+BEGIN_SRC ipython :session :file Tut121.svg :exports results
from numpy import convolve as conv;
num = [1,1]
den = [0.1,1,0,0]

sys = tf(num, den);
mag, phase, omega = control.bode_plot(sys, dB=True, Plot=False, omega=np.logspace(-1,2,200));

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Bode Plot of $(s+1)/s^2(0.1s+1)$")
plt.semilogx(omega, mag, 'b')
yticks = np.linspace(-60, 40, 6) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('magnitude(db)')
plt.grid(b=True, which='both')

plt.subplot(212)
g2, = plt.semilogx(omega, phase,'b')
plt.ylabel('phase(deg)')
plt.xlabel('frequency(rad/sec)')
yticks = np.linspace(-180, -120, 3) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

tikz_save(
    'tikz/Tut121.tikz',
    figureheight = '\\figureheight',
    figurewidth = '\\figurewidth'
    )

plt.show()
#+END_SRC

#+RESULTS:
[[file:Tut121.svg]]

#+BEGIN_SRC ipython :session :file Tut122.svg :exports results
num = [1];
den = [1e-2,6e-2,1,0];
sys = tf(num, den);
mag, phase, omega = control.bode_plot(sys, dB=True, Plot=False, omega=np.logspace(0,2,200));

plt.subplots_adjust(hspace=0.4)

plt.subplot(211)
plt.title("Bode Plots of $1/s(0.01s^2+0.06s+1)$")
plt.semilogx(omega, mag, 'b')
yticks = np.linspace(0, -80, 5) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.ylabel('magnitude(db)')
plt.grid(b=True, which='both')

plt.subplot(212)
g2, = plt.semilogx(omega, phase,'b')
plt.ylabel('phase(deg)')
plt.xlabel('frequency(rad/sec)')
yticks = np.linspace(-90, -270, 5) 
ylabels = [(str(ytick)) for ytick in yticks]
plt.yticks(yticks, ylabels)
plt.grid(b=True, which='both')

tikz_save(
    'tikz/Tut122.tikz',
    figureheight = '\\figureheight',
    figurewidth = '\\figurewidth'
    )

plt.show()
#+END_SRC

#+RESULTS:
[[file:Tut122.svg]]

#+BEGIN_SRC ipython :session :file Tut123.svg :exports results
from numpy import convolve as conv;
num = [1];
den = conv([1,1],[1/2,1]);
den = conv(den,[2,1]);
sys = tf(num, den);

T, yout = control.step_response(sys, T=np.linspace(0,15,300));


yout  = yout*30+300

dy = yout[1:len(yout)]-yout[0:-1]
index = np.argmax(dy)

x0 = T[index]
x1 = T[index+1]
y0 = yout[index]
y1 = yout[index+1]

#The line will pass (xa,300) and (xb,330)
xa = x0 + (300-y0)*(x1-x0)/(y1-y0)
xb = x0 + (330-y0)*(x1-x0)/(y1-y0)

T = np.concatenate((np.linspace(-5,0,100), T))
yout = np.concatenate((np.zeros(100)+300, yout))

plt.plot(T, yout+np.random.randn(yout.size)/2, 'b')
plt.plot([xa,xb], [300,330], 'r--')

plt.title('Step Response')
plt.grid(b=True, which='both')

tikz_save(
    'tikz/Tut123.tikz',
    figureheight = '\\figureheight',
    figurewidth = '\\figurewidth'
    )

plt.show()
#+END_SRC

#+RESULTS:
[[file:Tut123.svg]]
