#+BEGIN_SRC ipython :session :exports none
import numpy as np
from numpy import log10 as log
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Arial']})
## for Palatino and other serif fonts use:
#rc('font',**{'family':'serif','serif':['Palatino']})
rc('text', usetex=True)
import control
from control.matlab import *
from control import bode_plot as bode
from control import nyquist, margin

%load_ext tikzmagic

%matplotlib inline
%config InlineBackend.figure_format = 'svg'
#+END_SRC

#+RESULTS:

* PID Control Schemes
** Motivation
- So far, we design controller/compensator based on models of plants(transfer function, Bode plot).
- However, in many practical situations, we deal with very complicated plants whose mathematical models are difficult to obtain. Hence, the analytical approach of designing a controller is not possible.
- In this chapter, we shall introduce tuning rules for basic PID controllers.
- More than half of industrial plants today still employ PID control schemes.

** PID Controller
#+BEGIN_SRC ipython :session :file assets/Lec9Diagram.svg :exports results
%%tikz -l matrix,arrows,shapes -s 400,50 -f svg -S assets/Lec9Diagrama.svg
\tikzstyle{point} = [coordinate]
\tikzstyle{box} = [rectangle, draw, semithick]
\matrix[row sep = 7mm, column sep = 10mm]{
%first row
\node (p1) [] {$R(s)$};&
\node (p2) [circle,draw,inner sep=4pt] {};&
\node (outer) [box] {PID};&
\node (p3) [point] {};&
\node (inner) [box] {Plant};&
\node (p5) [point] {};&
\node (p6) [] {$Y(s)$};\\
%third row
&
\node (p9) [point] {};&
&
&
&
\node (p10) [point] {};&
\\
};
\draw [semithick,->] (p1)--node[near end, above]{\scriptsize{$+$}} (p2);
\draw [semithick,->] (p2)--(outer);
\draw [semithick,->] (outer)--(p3)--(inner);
\draw [semithick,->] (inner)--(p5)--(p6);
\draw [semithick,->] (p5)--(p10)--(p9)--node[near end, left]{\scriptsize{$-$}} (p2);
\draw [semithick] (p2.north east)--(p2.south west);
\draw [semithick] (p2.south east)--(p2.north west);
#+END_SRC

#+RESULTS:
[[file:assets/Lec9Diagram.svg]]


- The standard form of PID controller is $$C(s) = K_p\left(1+\frac{1}{T_is}+T_ds\right) = K_p+\frac{K_I}{s}+K_Ds.$$
- *P(Proportional) action*: P-action provides an action which depends on the instantaneous value of the control error. It can be used to improve speed of response and steady-state error but with limited performance.
- *I (Integral) action*: I-action gives a controller output that is proportional to the accumulated error, which implies that it is a slow reaction control mode. It is used to achieve zero-steady error in the presence of a step reference and/or disturbance. The shortcomings are: its pole at the origin is detrimental to loop stability and undesirable effect in the presence of actuator saturation, known as /wind-up/.
- *D (Derivative) action*: It acts on the changing rate of the control error, sometimes referred to as a predictive mode. Its limitation is the tendency to yield large control signals in response to high frequency control errors such as error induced by set-point changes or measurement noises.

** Ziegler-Nichols Rules
- The process of selecting the controller parameters $K_p$, $T_i$ and $T_d$ is known as PID Tuning.
- Two classical methods for determining the parameters of PID controllers were presented by Ziegler-Nichols in 1942.
  - Step response method
  - Self-oscillation method
- $K_p$, $T_i$ and $T_d$ from Ziegler-Nichols rule often serve as the starting point for tuning procedures used by manufacturers and process industry.
- It typically yields an aggressive gain and overshoot. Further tuning is needed if minimizing overshoot is desirable.

** Step Response Method
#+BEGIN_SRC ipython :session :file assets/Lec9Sshape.svg :exports results
%%tikz -l arrows -s 400,200 -f svg -S assets/Lec9Sshape.svg
\draw[thick, color=blue] plot[smooth] file{data};
\draw[semithick,-latex] (-2,-1)--(11,-1);
\draw[semithick,-latex] (-1,-2)--(-1,6);
\draw[dashed] (-1,5)--(10,5);
\draw[dashed] (-1,0)--(10,0);
\draw[dashed] (4.5,5)--(4.5,-1);
\draw[dashed] (0.8,0)--(0.8,-1);
\draw[dashed] (0,0)--(0,-1);
\draw[thick,dash dot, color=red] (4.5,5)--(0.8,0);

\node [anchor=east] at (-1,0) {$y_0$};
\node [anchor=east] at (-1,5) {$y_\infty$};
\node [anchor=north] at (0,-1) {$t_0$};
\node [anchor=north] at (0.8,-1) {$t_1$};
\node [anchor=north] at (4.5,-1) {$t_2$};
\node [anchor=south] at (4.5,5) {m.s.t.};

\draw[semithick,latex-latex] (0,-2)-- node [anchor=south] {$L$} (0.8,-2);
\draw[semithick,latex-latex] (0.8,-2)-- node [anchor=south] {$T$} (4.5,-2);
#+END_SRC

#+RESULTS:
[[file:assets/Lec9Sshape.svg]]


- Many plants, particularly those in the process industries has step response of S-shape (reaction curve):
  - open-loop stable
  - no integrator
  - no dominant complex poles
- An experiment for deriving step response can be designed as
  + With the plant in open-loop, let the plant run at normal operating condition with constant input $u_0$ and steady state output $y_0$ .
  + At the initial time $t_0$ , apply a step change to the plant, from $u_0$ to $u_\infty$ (in the range of 10 to 20% of full scale).
  + Record the output response to get the reaction curve. In the figure, the m.s.t. stands for the maximum slope tangent.
  + Compute $$K = \frac{y_\infty-y_0}{u_\infty-u_0},\,L=t_1-t_0,T = t_2-t_1.$$ $K$ is the system gain. $L$ and $T$ are often called the apparent dead time and the apparent time constant.
- The PID parameters are then chosen according to the table
| Controller | \(K_p\)     | \(T_i\) | \(T_d\)  |
|------------+-------------+---------+----------|
| P          | \(T/KL\)    |         |          |
| PI         | \(0.9T/KL\) | \(3L\)  |          |
| PID        | \(1.2T/KL\) | \(2L\)  | \(0.5L\) |

*** Example
Consider a plant with transfer function $$G(s) = \frac{5}{(s+1)^3}.$$

#+BEGIN_SRC ipython :session :file assets/Lec9Step.svg :exports results
num = [5];
den = [1,3,3,1];
sys = tf(num, den);

T, yout = control.step_response(sys, T=np.linspace(0,10,200));

dy = yout[1:len(yout)]-yout[0:-1];
index = np.argmax(dy);

x0 = T[index]
x1 = T[index+1]
y0 = yout[index]
y1 = yout[index+1]

#The line will pass (xa,0) and (xb,5)
xa = x0 - y0*(x1-x0)/(y1-y0)
xb = x0 + (5-y0)*(x1-x0)/(y1-y0)

plt.plot(T, yout, 'b')
plt.plot([xa,xb], [0,5], 'r--')

plt.annotate('$t_2$=%.1f' % xb, xy=(xb,5), xytext=(xb,3),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='center',
            verticalalignment='center', 
            )

plt.annotate('$t_1$=%.1f' % xa, xy=(xa,0), xytext=(xa,1),
            arrowprops=dict(arrowstyle='-|>'),
            horizontalalignment='center',
            verticalalignment='center', 
            )
plt.title('Unit Step Response')
plt.grid(b=True, which='both')
plt.ylim(0,5)
plt.xlim(0,10)
plt.show()

f = open('data', 'w')
f.write('-1.0 0.0\n')
for i in range(0,len(T)):
    f.write(str(T[i])+' '+str(yout[i])+'\n')

f.close()


#+END_SRC

#+RESULTS:
[[file:assets/Lec9Step.svg]]

- From the unit step response, it is known that $$K = 5/1 = 5,\,L = 0.8,\,T = 4.5-0.8 = 3.7.$$
- The PID parameters given by Ziegler-Nichols tuning rule is $$K_p = 1.11,\,T_i = 1.60,\,T_d = 0.40.$$

#+BEGIN_SRC ipython :session :file assets/Lec9ClosedLoop.svg :exports results
num = [5];
den = [1,3,3,1];
sys = tf(num, den);

num = np.array([0.4,1,1./1.6])*1.11
den = [1,0]
ctrl = tf(num,den);

cl = control.feedback(control.series(ctrl,sys))
T, yout = control.step_response(cl, T=np.linspace(0,20,200));

plt.plot(T, yout, 'b')

plt.title('Closed-Loop Step Response')
plt.grid(b=True, which='both')
plt.ylim(0,1.6)
plt.xlim(0,20)
plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec9ClosedLoop.svg]]

** Self-Oscillation Method
- Set the integrator and derivative gain to $0$.
- Increase the proportional gain $K_p$ from $0$, until the closed-loop system starts oscillation.
- Record the critical propotional gain $K_{cr}$ and the oscillation period $P_{cr}$.
- Notice that if the open-loop transfer function of the plant is given, then
  - The critical gain is the gain margin, i.e., $K_{cr} = K_g$.
  - The critical oscillation period is related to the phase crossover frequency: $$P_{cr} = 2\pi/\omega_\phi.$$
- Set the PID controller according to
| Controller | \(K_p\)        | \(T_i\)        | \(T_d\)         |
|------------+----------------+----------------+-----------------|
| P          | \(0.5K_{cr}\)  |                |                 |
| PI         | \(0.45K_{cr}\) | \(P_{cr}/1.2\) |                 |
| PID        | \(0.6K_{cr}\)  | \(0.5P_{cr}\)  | \(0.125P_{cr}\) |

*** Example
- Consider the same plant with transfer function $$G(s) = \frac{5}{(s+1)^3}.$$
- The phase crossover happens when $\angle G(j\omega_\phi) = -180^\circ$, which implies that $$\angle 1+j\omega_\phi = 60^\circ\Rightarrow\omega_\phi = \sqrt{3}.$$
- The corresponding magnitude is $|G(j\sqrt{3})| = 5/8$ and hence the gain margin/critical gain is $1.6$.
- The critical period is $2\pi/\sqrt{3} = 3.63$.
- The PID parameters according to Ziegler-Nichols rule is $$K_p = 0.96,\, T_i=1.81,\,T_d = 0.453.$$

#+BEGIN_SRC ipython :session :file assets/Lec9ClosedLoop2.svg :exports results
num = [5];
den = [1,3,3,1];
sys = tf(num, den);

num = np.array([0.453,1,1./1.81])*0.96
den = [1,0]
ctrl = tf(num,den);

cl = control.feedback(control.series(ctrl,sys))
T, yout = control.step_response(cl, T=np.linspace(0,20,200));

plt.plot(T, yout, 'b')

plt.title('Closed-Loop Step Response')
plt.grid(b=True, which='both')
plt.ylim(0,1.6)
plt.xlim(0,20)
plt.show()
#+END_SRC

#+RESULTS:
[[file:assets/Lec9ClosedLoop2.svg]]

** Remarks
- Ziegler-Nichols tuning typically yields an aggressive gain and overshoot, which may be unacceptable in some applications.
- However, it can serve as a starting point for finer tuning.
- For example, by increasing $T_i$ and $T_d$, we can expect the overshoot will be reduced.
- However, for certain applications where the measurement noise is significant, we need to be extra careful when increasing $T_d$.
- Ziegler-Nichols tuning rules have been widely used in process control where the plant dynamics are unknown. When the plant model is available, other controller design methods exists.
- Generally, to apply the step response method, one needs to obtain the S-shape response. Plants with complicated dynamics but no integrators are usually the cases.
- The self-oscillation method requires the plant to be forced into oscillation. This can be expensive and dangerous.
